
#define BACKBUFFER_COUNT 2
// @Untested: Should we use DXGI_FORMAT_R8G8B8A8_UNORM_SRGB?
#define SWAP_CHAIN_FORMAT DXGI_FORMAT_R8G8B8A8_UNORM
#define SWAP_CHAIN_FLAGS DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT
#define COMMAND_LIST_TYPE D3D12_COMMAND_LIST_TYPE_DIRECT

typedef HRESULT D3DCompile_t(LPCVOID, SIZE_T, LPCSTR, const D3D_SHADER_MACRO*, ID3DInclude*, LPCSTR, LPCSTR, UINT, UINT, ID3DBlob**, ID3DBlob**);

ENUM(D3D12_INPUT_SLOTS) {
    PER_VERTEX,
    PER_INSTANCE,
};

const s32 an_image_width  = 90;
const s32 an_image_height = 120;
const u32 an_image[an_image_height][an_image_width] = {
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
    {0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, 0xFF00FFFF, 0xFFFF00FF, 0xFFFFFF00, },
    {0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFF0000, 0xFF00FF00, 0xFF0000FF, },
    {0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, 0x33FFFFFF, 0x55FFFFFF, 0xAAFFFFFF, },
    {0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, 0xAA000000, 0x55000000, 0x33000000, },
};

const u32 another_image[an_image_height][an_image_width] = {
    {0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, 0x0000FFFF, },
};

static char *new_shader = R"(
                        struct Vertex_In {
                        float2 p: VERTEX_POSITION;
                        float4 color: VERTEX_COLOR;
                        
                        float2 offset: INSTANCE_OFFSET;
                        float2 scale: INSTANCE_SCALE;
                        float2 rot: INSTANCE_ROTATION;
                        float4 instance_color: INSTANCE_COLOR;
                        };
                        
                        struct Vertex_Out {
                          float4     p: SV_POSITION; // Clip-space location
                          float4 color: COLOR;
                        };
                        
                        row_major float4x4 camera_transform: register(b0);
                        
                        SamplerState s: register(s0);
                        Texture2D    t: register(t0);
                        
                        Vertex_Out vertex_shader(Vertex_In input) {
                        float2 p = input.p;
                        
                        float2 rot = input.rot;
                        float2 scale = input.scale;
                        float2 offset = input.offset;
                        
                        float4 color = input.color;
                        
                        
                        p = float2((p.x * rot.x) - (p.y * rot.y), (p.x * rot.y) + (p.y * rot.x));
                        p *= scale;
                        p += offset;
                        
                          Vertex_Out output;
                          output.p     = mul(float4(p, 0.0f, 1.0f), camera_transform);
                          output.color = float4(color.x * input.instance_color.x,
color.y * input.instance_color.y,
color.z * input.instance_color.z,
color.w * input.instance_color.w);

                          return output;
                        }
                        
                        float4 pixel_shader(Vertex_Out input) : SV_Target {
                        float4 out_color = input.color;
                          return out_color;
                        }
                        )";

// @Hardcoded
#define MAX_COMMAND_LIST_COUNT 256
#define MAX_VERTEX_BUFFER_COUNT 256
#define MAX_CONSTANT_BUFFER_COUNT 256
#define MAX_MESH_COUNT 256
#define MAX_EDITABLE_MESH_COUNT 256

struct Stored_Command_List {
    ID3D12CommandAllocator    *allocator;
    ID3D12GraphicsCommandList *list;
};

struct Vertex_Buffer_Info {
    ID3D12Resource*          buffer;
    D3D12_VERTEX_BUFFER_VIEW view;
};
struct Mutable_Vertex_Buffer {
    Vertex_Buffer_Info upload;
    Vertex_Buffer_Info actual; // "default" is a reserved keyword. Sigh.
};

struct Stored_Texture {
    ID3D12Resource* resource;
    D3D12_SHADER_RESOURCE_VIEW_DESC desc;
};
struct Stored_Constant_Buffer {
    ID3D12Resource *upload_buffer;
    ID3D12Resource *default_buffer;
    u64 buffer_length;
    u8 *mapped_address;
};

struct Mesh {
    ID3D12Resource *vertex_buffer;
    D3D12_VERTEX_BUFFER_VIEW vertex_buffer_view;
    
    ID3D12Resource *index_buffer;
    D3D12_INDEX_BUFFER_VIEW index_buffer_view;
    
    s32 index_count;
};

struct Editable_Mesh {
    Mesh *mesh;
    
    ID3D12Resource *vertex_upload;
    ID3D12Resource *index_upload;
    
    u8 *vertex_mapped;
    u8 *index_mapped;
};

struct Mesh_Upload_Data {
    u8 *vertex_upload_buffer;
    u8 *index_upload_buffer;
    
    u64 vertex_buffer_size;
    u64 index_buffer_size;
    
    void *default_vertex_buffer_handle;
    void *upload_vertex_buffer_handle;
    void *default_index_buffer_handle;
    void *upload_index_buffer_handle;
};

static struct {
    ID3D12Device *device;
    ID3D12CommandQueue *command_queue;
    IDXGISwapChain1 *swap_chain1; // Do we need this?
    IDXGISwapChain3 *swap_chain3;
    ID3D12DescriptorHeap *rtv_heap;
    
    s32 current_backbuffer;
    ID3D12Resource *backbuffers[BACKBUFFER_COUNT];
    D3D12_CPU_DESCRIPTOR_HANDLE backbuffer_descriptors[BACKBUFFER_COUNT];
    
    ID3D12RootSignature *root_signature;
    ID3D12PipelineState *pipeline_state;
    
    ID3D12DescriptorHeap       *shader_descriptor_heap;
    
    u64                         single_buffer_fence_value;
    ID3D12Fence*                single_buffer_fence;
    HANDLE                      single_buffer_fence_event;
    
    D3D12_GRAPHICS_PIPELINE_STATE_DESC pipeline_state_desc;
    bool changed_pipeline_state_desc;
    
    ID3DBlob* shaders[Shader_ID::COUNT];
    
    s32 command_list_count;
    Stored_Command_List command_lists[MAX_COMMAND_LIST_COUNT];
    
    s32 mutable_vertex_buffer_count;
    Mutable_Vertex_Buffer mutable_vertex_buffers[MAX_VERTEX_BUFFER_COUNT];
    
    s32 mesh_count;
    Mesh meshes[MAX_MESH_COUNT];
    
    s32 editable_mesh_count;
    Editable_Mesh editable_meshes[MAX_EDITABLE_MESH_COUNT];
} d3d;

//
// 
//

static inline Stored_Command_List *get_command_list(u16 handle) {
    ASSERT(handle < MAX_COMMAND_LIST_COUNT);
    return &d3d.command_lists[handle];
}
static inline Mutable_Vertex_Buffer *get_vertex_buffer(u16 handle) {
    ASSERT(handle < MAX_VERTEX_BUFFER_COUNT);
    return &d3d.mutable_vertex_buffers[handle];
}
static inline Mesh *get_mesh(u16 handle) {
    ASSERT(handle < MAX_MESH_COUNT);
    return &d3d.meshes[handle];
}
static inline Editable_Mesh *get_editable_mesh(u16 handle) {
    ASSERT(handle < MAX_EDITABLE_MESH_COUNT);
    return &d3d.editable_meshes[handle];
}

static void sleep_until_present() {
    // @Temporary single buffering until we make a second frame state.
    MIRROR_VARIABLE(u64, fence_value, &d3d.single_buffer_fence_value);
    MIRROR_VARIABLE(ID3D12Fence*, fence, &d3d.single_buffer_fence);
    
    fence_value += 1;
    d3d.command_queue->Signal(fence, fence_value);
    
    while(fence->GetCompletedValue() < fence_value) {
        fence->SetEventOnCompletion(fence_value, d3d.single_buffer_fence_event);
        WaitForSingleObject(d3d.single_buffer_fence_event, INFINITE);
    }
}

static inline void d3d_set_fullscreen(bool fullscreen) {
    d3d.swap_chain1->SetFullscreenState(fullscreen, 0);
}

static void query_backbuffers(ID3D12Resource** backbuffers, D3D12_CPU_DESCRIPTOR_HANDLE* descriptors) {
    u32 rtv_descriptor_size = d3d.device->GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_RTV);
    
    FORI_TYPED(s32, 0, BACKBUFFER_COUNT) {
        D3D12_CPU_DESCRIPTOR_HANDLE cpu_descriptor = d3d.rtv_heap->GetCPUDescriptorHandleForHeapStart();
        cpu_descriptor.ptr += i * rtv_descriptor_size;
        
        ID3D12Resource *backbuffer = 0;
        d3d.swap_chain3->GetBuffer(i, IID_PPV_ARGS(&backbuffer));
        d3d.device->CreateRenderTargetView(backbuffer, 0, cpu_descriptor);
        
        backbuffers[i] = backbuffer;
        descriptors[i] = cpu_descriptor;
    }
}

static void print_error_from_blob_and_exit(ID3DBlob *blob) {
    char *error_message = CAST(char*, blob->GetBufferPointer());
    ssize error_length  = blob->GetBufferSize();
    
    OutputDebugStringA("\n////////////////////////////////////////////\n");
    OutputDebugStringA(error_message);
    OutputDebugStringA("\n////////////////////////////////////////////\n");
    ExitProcess(0);
}

static ID3DBlob *compile_shader(D3DCompile_t* compile_func, string code, char *entry_point, char *standard) {
    const u32 flags = D3DCOMPILE_DEBUG | D3DCOMPILE_ENABLE_STRICTNESS | 
        D3DCOMPILE_OPTIMIZATION_LEVEL0 | D3DCOMPILE_WARNINGS_ARE_ERRORS;
    
    ID3DBlob* result     = 0;
    ID3DBlob* error_blob = 0;
    u32 error = compile_func(code.data, code.length, 0, 0, 0, entry_point, standard, 
                             flags, 0, &result, &error_blob);
    
    if(error != S_OK) {
        print_error_from_blob_and_exit(error_blob);
    }
    
    return result;
}

static inline D3D12_RESOURCE_DESC make_buffer_desc(usize buffer_length) {
    D3D12_RESOURCE_DESC result = {};
    
    result.Dimension        = D3D12_RESOURCE_DIMENSION_BUFFER;
    result.Alignment        = 0; // 64kB for buffers by default
    result.Width            = buffer_length;
    result.Height           = 1;
    result.Format           = DXGI_FORMAT_UNKNOWN;
    result.DepthOrArraySize = 1;
    result.SampleDesc.Count = 1;
    result.Layout           = D3D12_TEXTURE_LAYOUT_ROW_MAJOR;
    result.Flags            = D3D12_RESOURCE_FLAG_NONE;
    result.MipLevels        = 1;
    
    return result;
}

static inline D3D12_HEAP_PROPERTIES make_heap_properties(D3D12_HEAP_TYPE type) {
    D3D12_HEAP_PROPERTIES result = {};
    result.Type                 = type;
    result.CPUPageProperty      = D3D12_CPU_PAGE_PROPERTY_UNKNOWN;
    result.MemoryPoolPreference = D3D12_MEMORY_POOL_UNKNOWN;
    result.CreationNodeMask     = 1;
    result.VisibleNodeMask      = 1;
    
    return result;
}

static inline D3D12_RESOURCE_BARRIER make_transition_barrier(ID3D12Resource *resource, D3D12_RESOURCE_STATES before, D3D12_RESOURCE_STATES after) {
    D3D12_RESOURCE_BARRIER result = {};
    result.Type                   = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;
    result.Flags                  = D3D12_RESOURCE_BARRIER_FLAG_NONE;
    result.Transition.pResource   = resource;
    result.Transition.Subresource = 0;
    result.Transition.StateBefore = before;
    result.Transition.StateAfter  = after;
    
    return result;
}

static inline ID3D12Resource *make_upload_buffer_of_appropriate_size(D3D12_RESOURCE_DESC *desc, D3D12_PLACED_SUBRESOURCE_FOOTPRINT *footprint, u64 *upload_size) {
    u32 row_count   = 0;
    u64 row_bytes   = 0;
    d3d.device->GetCopyableFootprints(desc, 0, 1, 0, footprint, &row_count, &row_bytes, upload_size);
    
    ID3D12Resource *upload_buffer = 0;
    {
        D3D12_RESOURCE_DESC upload_buffer_desc = make_buffer_desc(*upload_size);
        
        D3D12_HEAP_PROPERTIES upload_heap_properties = make_heap_properties(D3D12_HEAP_TYPE_UPLOAD);
        
        HRESULT hr = d3d.device->CreateCommittedResource(&upload_heap_properties, D3D12_HEAP_FLAG_NONE, &upload_buffer_desc,
                                                         D3D12_RESOURCE_STATE_GENERIC_READ, 0, IID_PPV_ARGS(&upload_buffer));
        
        ASSERT(hr == S_OK);
    }
    
    return upload_buffer;
}

static void allocate_default_and_upload_buffers_and_map(u64 buffer_length, D3D12_RESOURCE_STATES init_state,
                                                        ID3D12Resource **default_buffer, ID3D12Resource **upload_buffer, u64 *upload_size, u8 **mapped_address) {
    D3D12_RESOURCE_DESC resource_desc = make_buffer_desc(buffer_length);
    
    D3D12_HEAP_PROPERTIES heap_properties = make_heap_properties(D3D12_HEAP_TYPE_DEFAULT);
    
    d3d.device->CreateCommittedResource(&heap_properties, D3D12_HEAP_FLAG_NONE, &resource_desc,
                                        init_state, 0, IID_PPV_ARGS(default_buffer));
    
    D3D12_PLACED_SUBRESOURCE_FOOTPRINT footprint = {};
    *upload_buffer = make_upload_buffer_of_appropriate_size(&resource_desc, &footprint, upload_size);
    
    {
        D3D12_RANGE read_range = {};
        (*upload_buffer)->Map(0, &read_range, CAST(void **, mapped_address));
    }
}

static u16 make_editable_mesh(s32 vertex_size, s32 vertex_capacity, u8 **vertex_mapped, u8 **index_mapped) {
    s32 index_capacity = (vertex_capacity - 2) * 3;
    s32 editable_index = d3d.editable_mesh_count++;
    s32 mesh_index = d3d.mesh_count++;
    
    ASSERT(editable_index < MAX_EDITABLE_MESH_COUNT);
    ASSERT(mesh_index < MAX_MESH_COUNT);
    
    Editable_Mesh *editable = &d3d.editable_meshes[mesh_index];
    auto mesh = &d3d.meshes[mesh_index];
    
    *editable = {};
    editable->mesh = mesh;
    
    s32 vertex_buffer_length = vertex_size * vertex_capacity;
    s32 index_buffer_length = sizeof(u16) * index_capacity;
    
    u64 vertex_buffer_size;
    u64 index_buffer_size;
    
    // I guess we can still use committed resources here?
    allocate_default_and_upload_buffers_and_map(vertex_buffer_length, D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER,
                                                &mesh->vertex_buffer, &editable->vertex_upload, &vertex_buffer_size, &editable->vertex_mapped);
    
    allocate_default_and_upload_buffers_and_map(index_buffer_length, D3D12_RESOURCE_STATE_INDEX_BUFFER,
                                                &mesh->index_buffer, &editable->index_upload, &index_buffer_size, &editable->index_mapped);
    
    mesh->vertex_buffer_view.BufferLocation = mesh->vertex_buffer->GetGPUVirtualAddress();
    mesh->vertex_buffer_view.SizeInBytes    = CAST(u32, vertex_buffer_size);
    mesh->vertex_buffer_view.StrideInBytes  = vertex_size;
    
    mesh->index_buffer_view.BufferLocation = mesh->index_buffer->GetGPUVirtualAddress();
    mesh->index_buffer_view.SizeInBytes    = CAST(u32, index_buffer_size);
    mesh->index_buffer_view.Format = DXGI_FORMAT_R16_UINT;
    
    *vertex_mapped = editable->vertex_mapped;
    *index_mapped = editable->index_mapped;
    
    return {CAST(u16, mesh_index)};
}

static void update_editable_mesh(u16 list_handle, u16 editable_handle, s32 index_count, bool make_read_only) {
    auto list = get_command_list(list_handle)->list;
    auto editable = get_editable_mesh(editable_handle);
    Mesh *mesh = editable->mesh;
    
    // @Duplication update_vertex_buffer
    // The more generalised function version of this would require dynamic allocation for N barriers at a time.
    D3D12_RESOURCE_BARRIER barriers[2] = {
        make_transition_barrier(mesh->vertex_buffer, D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER, D3D12_RESOURCE_STATE_COPY_DEST),
        make_transition_barrier(mesh->index_buffer, D3D12_RESOURCE_STATE_INDEX_BUFFER, D3D12_RESOURCE_STATE_COPY_DEST),
    };
    
    list->ResourceBarrier(ARRAY_LENGTH(barriers), barriers);
    list->CopyResource(mesh->vertex_buffer, editable->vertex_upload);
    list->CopyResource(mesh->index_buffer, editable->index_upload);
    
    FORI_NAMED(barrier_index, 0, ARRAY_LENGTH(barriers)) {
        SWAP(barriers[barrier_index].Transition.StateBefore, barriers[barrier_index].Transition.StateAfter);
    }
    
    list->ResourceBarrier(ARRAY_LENGTH(barriers), barriers);
    
    mesh->index_count = index_count;
    
    if(make_read_only) {
        D3D12_DISCARD_REGION region = {};
        
        region.NumSubresources = 1;
        
        list->DiscardResource(editable->vertex_upload, &region);
        list->DiscardResource(editable->index_upload, &region);
    }
}

static void make_constant_buffers(s32 *descriptor_indices, usize *buffer_lengths, s32 count, Stored_Constant_Buffer *out) {
    D3D12_CPU_DESCRIPTOR_HANDLE base_descriptor = d3d.shader_descriptor_heap->GetCPUDescriptorHandleForHeapStart();
    s32 descriptor_size = d3d.device->GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV);
    
    FORI(0, count) {
        auto result = &out[i];
        usize buffer_length = buffer_lengths[i];
        s32 descriptor_index = descriptor_indices[i];
        u64 upload_size = 0;
        u8 *mapped_address = 0;
        allocate_default_and_upload_buffers_and_map(buffer_length, D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER, &result->default_buffer, &result->upload_buffer, &upload_size, &result->mapped_address);
        
        {
            D3D12_CONSTANT_BUFFER_VIEW_DESC desc = {};
            desc.BufferLocation = result->default_buffer->GetGPUVirtualAddress();
            desc.SizeInBytes = CAST(u32, buffer_length);
            
            D3D12_CPU_DESCRIPTOR_HANDLE cpu_descriptor = base_descriptor;
            cpu_descriptor.ptr += descriptor_size * descriptor_index;
            
            d3d.device->CreateConstantBufferView(&desc, cpu_descriptor);
        }
    }
}

static void upload_texture_to_gpu_rgba8(ID3D12Device* device, ID3D12GraphicsCommandList* command_list, 
                                        ID3D12DescriptorHeap* srv_heap, s32 index, u8* data, s32 width, s32 height) {
#if 0 // :RemoveTextures
    ASSERT(index < Texture_ID::COUNT);
    ID3D12Resource *texture;
    D3D12_RESOURCE_DESC texture_desc = {};
    texture_desc.Dimension        = D3D12_RESOURCE_DIMENSION_TEXTURE2D;
    texture_desc.Alignment        = 0;
    texture_desc.Width            = width;
    texture_desc.Height           = height;
    texture_desc.Format           = DXGI_FORMAT_R8G8B8A8_UNORM;
    texture_desc.DepthOrArraySize = 1;
    texture_desc.SampleDesc.Count = 1;
    texture_desc.Layout           = D3D12_TEXTURE_LAYOUT_UNKNOWN;
    texture_desc.Flags            = D3D12_RESOURCE_FLAG_NONE;
    texture_desc.MipLevels        = 1;
    {
        D3D12_HEAP_PROPERTIES texture_heap_properties = make_heap_properties(D3D12_HEAP_TYPE_DEFAULT);
        
        device->CreateCommittedResource(&texture_heap_properties, D3D12_HEAP_FLAG_NONE, &texture_desc,
                                        D3D12_RESOURCE_STATE_COPY_DEST, 0, IID_PPV_ARGS(&texture));
    }
    
    D3D12_PLACED_SUBRESOURCE_FOOTPRINT texture_footprint = {};
    u64 upload_size = 0;
    ID3D12Resource *upload_buffer = make_upload_buffer_of_appropriate_size(&texture_desc, &texture_footprint, &upload_size);
    
    {
        D3D12_RANGE read_range       = {};
        void*       buffer_address   = 0;
        upload_buffer->Map(0, &read_range, &buffer_address);
        
        u8* copy_from = data;
        u8* copy_to   = CAST(u8*, buffer_address);
        FORI(0, height) {
            u32 bytes_copied = 0;
            while(bytes_copied <= (texture_footprint.Footprint.RowPitch - width)) {
                mem_copy(copy_from, copy_to + bytes_copied, width);
                bytes_copied += width;
            }
            copy_from += width;
            copy_to += texture_footprint.Footprint.RowPitch;
        }
        upload_buffer->Unmap(0, 0);
    }
    
    {
        D3D12_TEXTURE_COPY_LOCATION copy_destination = {};
        copy_destination.pResource        = texture;
        copy_destination.Type             = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX;
        copy_destination.SubresourceIndex = 0;
        
        D3D12_TEXTURE_COPY_LOCATION copy_source      = {};
        copy_source.pResource       = upload_buffer;
        copy_source.Type            = D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT;
        copy_source.PlacedFootprint = texture_footprint;
        
        command_list->CopyTextureRegion(&copy_destination, 0, 0, 0, &copy_source, 0);
    }
    
    {
        D3D12_RESOURCE_BARRIER upload_to_shader_transition = make_transition_barrier(texture, D3D12_RESOURCE_STATE_COPY_DEST, D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE);
        
        command_list->ResourceBarrier(1, &upload_to_shader_transition);
    }
    
    {
        D3D12_SHADER_RESOURCE_VIEW_DESC srv_desc = {};
        srv_desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
        srv_desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D;
        srv_desc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;
        srv_desc.Texture2D.MipLevels = 1;
        
        D3D12_CPU_DESCRIPTOR_HANDLE cpu_descriptor = srv_heap->GetCPUDescriptorHandleForHeapStart();
        s32 descriptor_size = d3d.device->GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV);
        cpu_descriptor.ptr += descriptor_size * index;
        
        device->CreateShaderResourceView(texture, &srv_desc, cpu_descriptor);
        
        d3d.textures[index].resource = texture;
        d3d.textures[index].desc     = srv_desc;
    }
#endif
}

static void d3d_resize_backbuffers(v2s dim) {
    FORI(0, BACKBUFFER_COUNT) {
        d3d.backbuffers[i]->Release();
    }
    
    d3d.swap_chain1->ResizeBuffers(2, dim.x, dim.y, DXGI_FORMAT_UNKNOWN, SWAP_CHAIN_FLAGS);
    
    query_backbuffers(d3d.backbuffers, d3d.backbuffer_descriptors);
}

#if 0 // :RemoveTextures
GPU_SET_TEXTURE(set_texture) {
    ASSERT(id < Texture_ID::COUNT);
    ASSERT(d3d.textures[id].resource);
    
    D3D12_CPU_DESCRIPTOR_HANDLE cpu_descriptor = d3d.shader_descriptor_heap->GetCPUDescriptorHandleForHeapStart();
#if 0 // If we need multiple textures in our shader.
    s32 descriptor_size = d3d.device->GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV);
    cpu_descriptor.ptr += descriptor_size * texture_index_in_shader_code;
#endif
    
    d3d.device->CreateShaderResourceView(d3d.textures[id].resource, &d3d.textures[id].desc, cpu_descriptor);
}
#endif

GPU_SET_TRANSFORM(set_transform) {
    auto list = get_command_list(list_handle)->list;
    list->SetGraphicsRoot32BitConstants(0, 16, transform, 0);
}

GPU_MAKE_COMMAND_LISTS(make_command_lists) {
    ASSERT(d3d.command_list_count + count < MAX_COMMAND_LIST_COUNT);
    
    FORI_TYPED(s32, 0, count) {
        s32 list_index = d3d.command_list_count + i;
        ID3D12CommandAllocator*     allocator;
        ID3D12GraphicsCommandList*  list;
        
        d3d.device->CreateCommandAllocator(COMMAND_LIST_TYPE, IID_PPV_ARGS(&allocator));
        d3d.device->CreateCommandList(0, COMMAND_LIST_TYPE, allocator, 0, IID_PPV_ARGS(&list));
        
        // Command lists are closed by default, because we want our program to look like:
        // make_command_lists() at init time
        // begin_frame_and_clear() which will reset and setup every command list
        // [...]
        // submit_commands(end_frame = true) which will close the lists
        // end_frame()
        //
        // So, no GPU tasks at init time. It's sort of a shame, but really if the game inits
        // quickly enough it's fine.
        list->Close();
        
        d3d.command_lists[i].allocator = allocator;
        d3d.command_lists[i].list = list;
        ASSERT(CAST(u8, list_index) == list_index);
        out[i] = {CAST(u8, list_index)};
    }
    
    d3d.command_list_count += count;
}

GPU_MAKE_VERTEX_BUFFERS(make_vertex_buffers) {
    ASSERT(d3d.mutable_vertex_buffer_count + count < MAX_VERTEX_BUFFER_COUNT);
    
    FORI_TYPED(s32, 0, count) {
        s32 buffer_index = d3d.mutable_vertex_buffer_count + i;
        s32 vert_size = vert_sizes[i];
        s32 buffer_length = vert_size * lengths[i];
        auto upload = &d3d.mutable_vertex_buffers[buffer_index].upload;
        auto actual = &d3d.mutable_vertex_buffers[buffer_index].actual;
        
        u64 returned_length = 0;
        u8 *mapped_address = 0;
        allocate_default_and_upload_buffers_and_map(buffer_length, D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER, &actual->buffer, &upload->buffer, &returned_length, &mapped_address);
        
        upload->view.BufferLocation = upload->buffer->GetGPUVirtualAddress();
        upload->view.SizeInBytes    = buffer_length;
        upload->view.StrideInBytes  = vert_size;
        
        actual->view.BufferLocation = actual->buffer->GetGPUVirtualAddress();
        actual->view.SizeInBytes    = buffer_length;
        actual->view.StrideInBytes  = vert_size;
        
        ASSERT(CAST(u8, buffer_index) == buffer_index);
        out[i].handle = CAST(u8, buffer_index);
        out[i].mapped_buffer = mapped_address;
    }
    
    d3d.mutable_vertex_buffer_count += count;
}

#if 0
GPU_SET_VERTEX_SHADER(set_vertex_shader) {
    d3d.pipeline_state_desc.VS.pShaderBytecode = d3d.shaders[id]->GetBufferPointer();
    d3d.pipeline_state_desc.VS.BytecodeLength  = d3d.shaders[id]->GetBufferSize();
    d3d.changed_pipeline_state_desc = true;
}
#endif
#if 0
GPU_SET_PIXEL_SHADER(set_pixel_shader) {
    d3d.pipeline_state_desc.PS.pShaderBytecode = d3d.shaders[id]->GetBufferPointer();
    d3d.pipeline_state_desc.PS.BytecodeLength  = d3d.shaders[id]->GetBufferSize();
    d3d.changed_pipeline_state_desc = true;
}
#endif
#if 0 // :RemoveTextures
GPU_UPDATE_TEXTURE_RGBA(update_texture_rgba) {
    // @Temporary
    // Instead of allocating a new upload buffer every time, we'd like to make one and keep it throughout
    // execution.
    ID3D12Resource *upload_buffer = 0;
    {
        D3D12_RESOURCE_DESC upload_buffer_desc = make_buffer_desc(4 * dim.x * dim.y);
        
        D3D12_HEAP_PROPERTIES upload_heap_properties = make_heap_properties(D3D12_HEAP_TYPE_UPLOAD);
        
        HRESULT hr = d3d.device->CreateCommittedResource(&upload_heap_properties, D3D12_HEAP_FLAG_NONE, &upload_buffer_desc,
                                                         D3D12_RESOURCE_STATE_GENERIC_READ, 0, IID_PPV_ARGS(&upload_buffer));
        ASSERT(hr == S_OK);
    }
    
    {
        D3D12_RANGE read_range       = {};
        void*       buffer_address   = 0;
        upload_buffer->Map(0, &read_range, &buffer_address);
        
        mem_copy(data, buffer_address, dim.x * dim.y * 4);
        
        upload_buffer->Unmap(0, 0);
    }
    
    {
        D3D12_TEXTURE_COPY_LOCATION copy_destination = {};
        copy_destination.pResource        = d3d.textures[id].resource;
        copy_destination.Type             = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX;
        copy_destination.SubresourceIndex = 0;
        
        D3D12_TEXTURE_COPY_LOCATION copy_source      = {};
        copy_source.pResource       = upload_buffer;
        copy_source.Type            = D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT;
        copy_source.PlacedFootprint.Offset = 0;
        copy_source.PlacedFootprint.Footprint.Format   = DXGI_FORMAT_R8G8B8A8_UNORM;
        copy_source.PlacedFootprint.Footprint.Width    = dim.x;
        copy_source.PlacedFootprint.Footprint.Height   = dim.y;
        copy_source.PlacedFootprint.Footprint.Depth    = 1;
        copy_source.PlacedFootprint.Footprint.RowPitch = dim.x;
        
        D3D12_BOX copy_rect = {};
        copy_rect.left   = 0;
        copy_rect.top    = 0;
        copy_rect.right  = dim.x;
        copy_rect.bottom = dim.y;
        copy_rect.front  = 0;
        copy_rect.back   = 1;
        
        d3d.command_lists[0].list->CopyTextureRegion(&copy_destination, bottom_left.x, bottom_left.y, 0, &copy_source, &copy_rect);
    }
}
#endif

static void update_vertex_buffer(ID3D12GraphicsCommandList *list, Mutable_Vertex_Buffer *buffer) {
    D3D12_RESOURCE_BARRIER barriers[1] = {
        make_transition_barrier(buffer->actual.buffer, D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER, D3D12_RESOURCE_STATE_COPY_DEST),
    };
    
    list->ResourceBarrier(ARRAY_LENGTH(barriers), barriers);
    list->CopyResource(buffer->actual.buffer, buffer->upload.buffer);
    
    FORI_NAMED(barrier_index, 0, ARRAY_LENGTH(barriers)) {
        SWAP(barriers[barrier_index].Transition.StateBefore, barriers[barrier_index].Transition.StateAfter);
    }
    
    list->ResourceBarrier(ARRAY_LENGTH(barriers), barriers);
}

GPU_SUBMIT_COMMANDS(submit_commands) {
    // @Temporary: Dynamically allocate this.
    ID3D12GraphicsCommandList *command_lists[MAX_COMMAND_LIST_COUNT] = {};
    
    FORI(0, list_count) {
        command_lists[i] = get_command_list(list_handles[i])->list;
    }
    
    if(end_frame) {
        auto last_command_list = command_lists[list_count - 1];
        
        D3D12_RESOURCE_BARRIER present_barrier = make_transition_barrier(d3d.backbuffers[d3d.current_backbuffer], D3D12_RESOURCE_STATE_RENDER_TARGET, D3D12_RESOURCE_STATE_PRESENT);
        
        last_command_list->ResourceBarrier(1, &present_barrier);
    }
    
    FORI(0, list_count) {
        command_lists[i]->Close();
    }
    
    d3d.command_queue->ExecuteCommandLists(list_count, CAST(ID3D12CommandList **, command_lists));
}

static void begin_frame_and_clear(u16 list_handle, v4 clear_color) {
    if(d3d.changed_pipeline_state_desc) {
        d3d.device->CreateGraphicsPipelineState(&d3d.pipeline_state_desc, IID_PPV_ARGS(&d3d.pipeline_state));
        d3d.changed_pipeline_state_desc = false;
    }
    
    d3d.current_backbuffer = d3d.swap_chain3->GetCurrentBackBufferIndex();
    auto backbuffer = d3d.backbuffers[d3d.current_backbuffer];
    auto backbuffer_descriptor = d3d.backbuffer_descriptors[d3d.current_backbuffer];
    
    ID3D12DescriptorHeap *descriptor_heaps[] = {d3d.shader_descriptor_heap};
    auto descriptor_table = d3d.shader_descriptor_heap->GetGPUDescriptorHandleForHeapStart();
    
    rect2s draw_rect = rect2s_fit(16, 9, CAST(s32, backbuffer->GetDesc().Width), CAST(s32, backbuffer->GetDesc().Height));
    
    D3D12_VIEWPORT viewport = {};
    viewport.TopLeftX = CAST(f32, draw_rect.left);
    viewport.TopLeftY = CAST(f32, draw_rect.bottom);
    viewport.Width    = CAST(f32, draw_rect.right - draw_rect.left);
    viewport.Height   = CAST(f32, draw_rect.top - draw_rect.bottom);
    viewport.MinDepth = 0.0f;
    viewport.MaxDepth = 1.0f;
    
    D3D12_RECT scissor_rect = {};
    scissor_rect.right  = CAST(LONG, backbuffer->GetDesc().Width);
    scissor_rect.bottom = CAST(LONG, backbuffer->GetDesc().Height);
    
    FORI_TYPED(u16, 0, d3d.command_list_count) {
        auto _list = get_command_list(i);
        
        _list->allocator->Reset();
        _list->list->Reset(_list->allocator, d3d.pipeline_state);
        _list->list->SetGraphicsRootSignature(d3d.root_signature);
        _list->list->SetDescriptorHeaps(ARRAY_LENGTH(descriptor_heaps), descriptor_heaps);
        _list->list->SetGraphicsRootDescriptorTable(1, descriptor_table);
        _list->list->RSSetViewports(1, &viewport);
        _list->list->RSSetScissorRects(1, &scissor_rect);
        _list->list->OMSetRenderTargets(1, &backbuffer_descriptor, 0, 0);
    }
    
    auto list = get_command_list(list_handle)->list;
    
    {
        D3D12_RESOURCE_BARRIER render_barrier = make_transition_barrier(backbuffer, D3D12_RESOURCE_STATE_PRESENT, D3D12_RESOURCE_STATE_RENDER_TARGET);
        list->ResourceBarrier(1, &render_barrier);
    }
    
    list->ClearRenderTargetView(backbuffer_descriptor, clear_color.by_element, 0, 0);
#if 0
    list->Close();
    
    ID3D12CommandList *lists[] = {list};
    d3d.command_queue->ExecuteCommandLists(1, lists);
#endif
}

GPU_END_FRAME(end_frame) {
#if 1
    d3d.swap_chain3->Present(1, 0); // For vsync
#else
    d3d.swap_chain3->Present(0, DXGI_PRESENT_ALLOW_TEARING); // For no vsync
#endif
    
    sleep_until_present();
}

static void d3d_init(HWND wnd_handle) {
    u32 factory_flags = 0;
    
#if GENESIS_DEV
    // This has to be done first:
    ID3D12Debug *debug = 0;
    D3D12GetDebugInterface(IID_PPV_ARGS(&debug));
    debug->EnableDebugLayer();
    factory_flags = DXGI_CREATE_FACTORY_DEBUG;
#endif
    
    D3D12CreateDevice(0, D3D_FEATURE_LEVEL_12_0,  IID_PPV_ARGS(&d3d.device));
    
    IDXGIFactory2 *factory = 0; // The MSDN example uses IDXGIFactory4, what's up with that?
    CreateDXGIFactory2(factory_flags, IID_PPV_ARGS(&factory));
    
    {
        D3D12_COMMAND_QUEUE_DESC desc = {};
        desc.Type     = COMMAND_LIST_TYPE;
        desc.Priority = D3D12_COMMAND_QUEUE_PRIORITY_NORMAL; // D3D12_COMMAND_QUEUE_PRIORITY_HIGH;
        desc.Flags    = D3D12_COMMAND_QUEUE_FLAG_NONE;
        
        d3d.device->CreateCommandQueue(&desc, IID_PPV_ARGS(&d3d.command_queue));
    }
    
    {
        DXGI_SWAP_CHAIN_DESC1 desc = {};
        desc.Format           = SWAP_CHAIN_FORMAT;
        desc.SampleDesc.Count = 1; // No multisampling
        desc.BufferUsage      = DXGI_USAGE_RENDER_TARGET_OUTPUT;
        desc.BufferCount      = BACKBUFFER_COUNT;
        desc.Scaling          = DXGI_SCALING_STRETCH;
        desc.SwapEffect       = DXGI_SWAP_EFFECT_FLIP_DISCARD;
        desc.AlphaMode        = DXGI_ALPHA_MODE_IGNORE;
        desc.Flags            = SWAP_CHAIN_FLAGS; // DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING; For no VSYNC
        
        DXGI_SWAP_CHAIN_FULLSCREEN_DESC fullscreen = {};
        fullscreen.RefreshRate.Numerator   = 144;
        fullscreen.RefreshRate.Denominator = 1;
        fullscreen.Windowed                = TRUE;
        // We don't specify Scaling because if we do, we might initiate a mode change
        // when going to fullscreen.
        
        factory->CreateSwapChainForHwnd(d3d.command_queue, wnd_handle, &desc, &fullscreen, 0, &d3d.swap_chain1);
    }
    
    factory->MakeWindowAssociation(wnd_handle, DXGI_MWA_NO_WINDOW_CHANGES);
    
    d3d.swap_chain1->QueryInterface(IID_PPV_ARGS(&d3d.swap_chain3));
    
    d3d.swap_chain3->SetMaximumFrameLatency(1);
    
    ID3D12DescriptorHeap *rtv_heap = 0;
    {
        D3D12_DESCRIPTOR_HEAP_DESC desc = {};
        
        desc.Type = D3D12_DESCRIPTOR_HEAP_TYPE_RTV;
        desc.NumDescriptors = BACKBUFFER_COUNT;
        desc.Flags = D3D12_DESCRIPTOR_HEAP_FLAG_NONE;
        
        d3d.device->CreateDescriptorHeap(&desc, IID_PPV_ARGS(&d3d.rtv_heap));
    }
    
    query_backbuffers(d3d.backbuffers, d3d.backbuffer_descriptors);
    
    {
        D3D12_STATIC_SAMPLER_DESC static_sampler = {};
        static_sampler.Filter           = D3D12_FILTER_MIN_MAG_MIP_LINEAR;
        static_sampler.AddressU         = D3D12_TEXTURE_ADDRESS_MODE_CLAMP;
        static_sampler.AddressV         = D3D12_TEXTURE_ADDRESS_MODE_CLAMP;
        static_sampler.AddressW         = D3D12_TEXTURE_ADDRESS_MODE_CLAMP;
        static_sampler.ComparisonFunc   = D3D12_COMPARISON_FUNC_NEVER;
        static_sampler.ShaderRegister   = 0;
        static_sampler.RegisterSpace    = 0;
        static_sampler.ShaderVisibility = D3D12_SHADER_VISIBILITY_PIXEL;
        
        D3D12_DESCRIPTOR_RANGE pixel_shader_descriptor_ranges[1] = {};
        {
            auto range = &pixel_shader_descriptor_ranges[0];
            
            range->RangeType                         = D3D12_DESCRIPTOR_RANGE_TYPE_SRV;
            range->NumDescriptors                    = 1;
            range->BaseShaderRegister                = 0;
            range->RegisterSpace                     = 0;
            range->OffsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND;
        }
        
        
        D3D12_ROOT_PARAMETER root_params[2] = {};
        // Transform
        root_params[0].ParameterType = D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS;
        root_params[0].Constants.ShaderRegister = 0;
        root_params[0].Constants.Num32BitValues = 16;
        root_params[0].ShaderVisibility = D3D12_SHADER_VISIBILITY_VERTEX;
        
        // Texture
        root_params[1].ParameterType                       = D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE;
        root_params[1].DescriptorTable.pDescriptorRanges   = pixel_shader_descriptor_ranges;
        root_params[1].DescriptorTable.NumDescriptorRanges = ARRAY_LENGTH(pixel_shader_descriptor_ranges);
        root_params[1].ShaderVisibility                    = D3D12_SHADER_VISIBILITY_PIXEL;
        
        D3D12_ROOT_SIGNATURE_DESC desc = {};
        desc.NumParameters     = ARRAY_LENGTH(root_params);
        desc.pParameters       = root_params;
        desc.NumStaticSamplers = 1;
        desc.pStaticSamplers   = &static_sampler;
        desc.Flags             = D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT;
        ID3DBlob *signature    = 0;
        ID3DBlob *_errors      = 0;
        
        D3D12SerializeRootSignature(&desc, D3D_ROOT_SIGNATURE_VERSION_1_0, &signature, &_errors);
        
        if(_errors) {
            print_error_from_blob_and_exit(_errors);
        }
        
        d3d.device->CreateRootSignature(0, signature->GetBufferPointer(), signature->GetBufferSize(), IID_PPV_ARGS(&d3d.root_signature));
    }
    
    HMODULE d3d_lib = LoadLibraryW(L"D3dcompiler_47.dll");
    
    if(d3d_lib) {
        D3DCompile_t *compile_func = (D3DCompile_t *)GetProcAddress(d3d_lib, "D3DCompile");
        
        string code = make_string(CAST(u8*, new_shader), cstring_length(new_shader));
        
        d3d.shaders[Shader_ID::STANDARD_VERTEX] = compile_shader(compile_func, code, "vertex_shader", "vs_5_0");
        d3d.shaders[Shader_ID::STANDARD_PIXEL]  = compile_shader(compile_func, code,  "pixel_shader", "ps_5_0");
    }
    
    {
        D3D12_INPUT_ELEMENT_DESC input_elements[] = {
            {"VERTEX_POSITION", 0, DXGI_FORMAT_R32G32_FLOAT, D3D12_INPUT_SLOTS::PER_VERTEX, 0, D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0},
            {"VERTEX_COLOR", 0, DXGI_FORMAT_R32G32B32A32_FLOAT, D3D12_INPUT_SLOTS::PER_VERTEX, D3D12_APPEND_ALIGNED_ELEMENT, D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0},
            {"INSTANCE_OFFSET", 0, DXGI_FORMAT_R32G32_FLOAT, D3D12_INPUT_SLOTS::PER_INSTANCE, D3D12_APPEND_ALIGNED_ELEMENT, D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA, 1},
            {"INSTANCE_SCALE", 0, DXGI_FORMAT_R32G32_FLOAT, D3D12_INPUT_SLOTS::PER_INSTANCE, D3D12_APPEND_ALIGNED_ELEMENT, D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA, 1},
            {"INSTANCE_ROTATION", 0, DXGI_FORMAT_R32G32_FLOAT, D3D12_INPUT_SLOTS::PER_INSTANCE, D3D12_APPEND_ALIGNED_ELEMENT, D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA, 1},
            {"INSTANCE_COLOR", 0, DXGI_FORMAT_R32G32B32A32_FLOAT, D3D12_INPUT_SLOTS::PER_INSTANCE, D3D12_APPEND_ALIGNED_ELEMENT, D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA, 1},
        };
        
        D3D12_GRAPHICS_PIPELINE_STATE_DESC desc = {};
        desc.pRootSignature     = d3d.root_signature;
        desc.VS.pShaderBytecode = d3d.shaders[Shader_ID::STANDARD_VERTEX]->GetBufferPointer();
        desc.VS.BytecodeLength  = d3d.shaders[Shader_ID::STANDARD_VERTEX]->GetBufferSize();
        desc.PS.pShaderBytecode = d3d.shaders[Shader_ID::STANDARD_PIXEL]->GetBufferPointer();
        desc.PS.BytecodeLength  = d3d.shaders[Shader_ID::STANDARD_PIXEL]->GetBufferSize();
        FORI(0, ARRAY_LENGTH(desc.BlendState.RenderTarget)) {
            auto render_target = &desc.BlendState.RenderTarget[i];
            render_target->RenderTargetWriteMask = D3D12_COLOR_WRITE_ENABLE_ALL;
        }
        desc.SampleMask = 0xFFFFFFFF;
        desc.RasterizerState.FillMode = D3D12_FILL_MODE_SOLID;
        desc.RasterizerState.CullMode = D3D12_CULL_MODE_NONE;
        desc.RasterizerState.FrontCounterClockwise = TRUE;
        desc.RasterizerState.DepthClipEnable = FALSE; // If we ever get a depth buffer, we should enable this to ensure proper Z-ordering.
        // desc.DepthStencilState.DepthEnable = TRUE;
        desc.InputLayout.pInputElementDescs = input_elements;
        desc.InputLayout.NumElements = ARRAY_LENGTH(input_elements);
        desc.PrimitiveTopologyType = D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE;
        desc.NumRenderTargets = 1;
        desc.RTVFormats[0] = SWAP_CHAIN_FORMAT;
        desc.DSVFormat = DXGI_FORMAT_D24_UNORM_S8_UINT; // Probably not useful
        desc.SampleDesc.Count = 1;
        desc.Flags = D3D12_PIPELINE_STATE_FLAG_NONE;
        
        d3d.pipeline_state_desc = desc;
        d3d.device->CreateGraphicsPipelineState(&desc, IID_PPV_ARGS(&d3d.pipeline_state));
    }
    
    
    { // @Duplication
        D3D12_DESCRIPTOR_HEAP_DESC desc = {};
        
        desc.Type = D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV;
        desc.NumDescriptors = 3;
        desc.Flags = D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE;
        
        d3d.device->CreateDescriptorHeap(&desc, IID_PPV_ARGS(&d3d.shader_descriptor_heap));
    }
    
    // This is for frame sync:
    d3d.device->CreateFence(0, D3D12_FENCE_FLAG_NONE, IID_PPV_ARGS(&d3d.single_buffer_fence));
    d3d.single_buffer_fence_event = CreateEventA(0, 0, FALSE, 0);
}

static void draw_mesh_instances(u16 list_handle, u16 instance_buffer_handle, Draw_Command *commands, s32 command_count) {
    auto command_list = get_command_list(list_handle)->list;
    auto instance_buffer = get_vertex_buffer(instance_buffer_handle);
    auto instance_buffer_view = &instance_buffer->actual.view;
    
    update_vertex_buffer(command_list, instance_buffer);
    s32 running_instance_count = 0;
    
    FORI(0, command_count) {
        auto command = &commands[i];
        auto mesh = get_mesh(command->mesh_handle);
        
        command_list->IASetVertexBuffers(D3D12_INPUT_SLOTS::PER_VERTEX, 1, &mesh->vertex_buffer_view);
        command_list->IASetVertexBuffers(D3D12_INPUT_SLOTS::PER_INSTANCE, 1, instance_buffer_view);
        command_list->IASetIndexBuffer(&mesh->index_buffer_view);
        command_list->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST);
        
        command_list->DrawIndexedInstanced(mesh->index_count, command->instance_count, 0, 0, running_instance_count);
        running_instance_count += command->instance_count;
    }
}


//
// CURRENT:
//
Mesh editor:
- Functionality:
-   Actually one mesh per mesh :NeedToGenerateMultipleOutputMeshes

-   Hide non-selected layers.
-   Disallow placing clockwise verts.
- Interface:
-   Display each mesh in its corresponding button in the picker
-   Display each layer in its corresponding button in the picker
-   Add "+" symbols to "add" buttons in the picker

Graphics:
- Enable depth testing.

- @Speed: Make list handles be straight pointers to the command lists.
- Deal with D3D12 flickering on some frames; this probably has to do with the fact that we're single buffering our frames and not interleaving command queues/lists.
- (How does sRGB work in d3d12?)

Audio:
- Instruments: Either make our own and have some way to select them for each MIDI track, or embed them into the Synth_Input.
- Note velocity.
- SIMD waveform generators.


//
// ISSUES:
//
- DSound initialisation makes it tricky to play sound right after starting.

//
// CONTENT:
//
Game:
- Walls that stop crosshairs.
-   Some ideas:
-     Absolute walls that come from the side of the screen and have a hole in them.
-       Can we make this work with the player-controlled camera?
-       Are enemies that have a specific attack range/angle (cf. TBoI Greed) a good enough replacement?
-     Enemies with a weakspot, say in the back.
- Try some interesting stuff with NPlayers/NPartners.
-   Controls to rotate/spread out/gather crosshair formation?
-   Sharing crosshairs across multiple players.
- Wave spawn system:
-   Log types and order of kills. (Basic version done!)
-   Spawn enemies based on that.
- Color the player/partner so that they correspond to anti-player/anti-partner colors.

- After a level load, wait on updating the game until the player tries to act.
- Properly telegraph enemy spawns.

Controls:
- Make a rebinding menu.
-   That means we need something like get_name_for_button() to show what the current bindings are.

//
// ENGINE:
//
Gracefully handle different amounts of output audio channels.

Differenciate between GENESIS_DEV and a new GENESIS_DEBUG flag.

Read Synth1 config files???

UI:
- Automatic layouts for widget lists, etc.
-   place_cursor, xstep, ystep, xmod, ymod, xstep_on_y_overflow, ystep_on_x_overflow?

Profiling:
- Debug timer UI.
- Log max/average cycles spent in each block.
- Compute both "total" and "self" times.

Audio:
- Allow sound cutoffs.
- Music crossfading.

Platform:
- Get resolution options (GetDeviceCaps/EnumDisplaySettings/EnumDisplayMonitors, GetMonitorInfo).
-   Actually, we should probably have a set of resolution options independent from the monitor's and
-   only present the ones smaller than the monitor's current resolution, as in:
-   v2s possible_resolutions[] = {{1280, 720}, {1920, 1080}, {3840, 2160}};

Architecture:
- 2 ways to consider framerate independence:
-   Try to play catch-up based on previous frame timings, which is unreliable and stuttery.
-   Assume we don't drop frames and aim to render at the exact frame boundary.
-   Right now, we're doing the first of these two; perhaps we'd like to assume the vsync framerate up to a safety margin?
- Dynamic rendering, etc. in order to always hit framerate.

//
// RESOURCES:
//
Assets:
- Associate music with levels.
- Level loading/unloading.
- Level editor.
- Language packs.
-   For keyboard keys, non-alphabet languages may use a combination of letters (for regular keys) and non-letters (for text and special keys like arrow keys, etc.).

//
// EXTRA:
//
- Optionally load shlwapi(FilePathExistsW), winmm(timeBeginPeriod) at run-time and stop linking to them.
- Note: The first of these functions should not be used by release anyway.
